using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Diagnostics;

namespace task01
{
    public class Euclidean
    {
        //метод для получения НОД двух чисел
        //принимает входные параметры два целых числа
        //выходной параметр время затраченное на вычисление НОД
        public int GetNod(int n, int k, out double timeEuclid)
        {
            Stopwatch stopWatch = new Stopwatch();      //объект секундомера
            stopWatch.Start();                          //запуск отсчета
            n = Math.Abs(n);                            //модуль числа n
            k = Math.Abs(k);                            //модуль числа k
            int first;                                  //переменная для большего значения
            int second;                                 //переменная для меньшего значения
            int nod;                                    //переменная для НОД

            if (n > k)                                  //если n больше k, то переменные получают соответствующие значения                                     
            {
                first = n;                              //первая first равна n
                second = k;                             //вторая second равна k
            }
            else                                        //если нет, то меняем местами
            {
                first = k;
                second = n;
            }
            if (first == 0)                             //при равенстве одного из входных параметров 0, НОД равен второму: НОД(0,b)=b
            {
                nod = second;
            }
            else if (second == 0)                       //НОД(a,0)=a
            {
                nod = first;
            }
            else if (first == second)                   //если входные переменные равны, то НОД любой из них
            {
                nod = first;
            }
            else if (first % second != 0)               //проверка на неравенство остатка нулю
            {
                nod = GetNod(second, first % second, out _);//если неравен, то запускается рекурсия                                                            
            }
            else
            {
                nod = second;                           //если равен, то НОД меньшее значение
            }
            stopWatch.Stop();                           //остановка отсчета
            timeEuclid = stopWatch.Elapsed.TotalMilliseconds;//сохранение времени в выходном параметре
            return nod;                                 //метод возвращает НОД
        }
        //метод для получения НОД трех чисел
        //принимает входные параметры три целых числа
        public int GetNod(int n, int k, int l)
        {
            int nod;                                    //переменная для НОД
            nod = GetNod(n, k, out _);                  //вызов метода для получения НОД первых двух параметров
            
            if (nod != 1)                               //проверка на НОД равную 1
            {
                nod = GetNod(l, nod, out _);            //вызов метода для получения НОД третьего параметра и НОД первых двух
                return nod;
            }
            else
            {
                return nod;                            //если НОД первых двух чисел равна 1, то с третьим можно не считать
            }
        }
        //метод для получения НОД четырех чисел
        //принимает входные параметры четыре целых числа
        public int GetNod(int n, int k, int l, int m)
        {
            int nod;                                    //переменная для НОД
            nod = GetNod(n, k, out _);                  //вызов метода для получения НОД первых двух параметров
            
            if (nod != 1)                               //проверка на НОД равную 1
            {
                nod = GetNod(l, nod, out _);            //вызов метода для получения НОД третьего параметра и НОД первых двух
                {
                    
                    if (nod != 1)                       //проверка на НОД равную 1
                    {
                        nod = GetNod(m, nod, out _);    //вызов метода для получения НОД четвертого параметра и НОД первых трех
                        return nod;
                    }
                    else
                    {
                        return nod;                     //если НОД первых трех чисел равна 1, то с остальными можно не считать
                    }
                }
            }
            else
            {
                return nod;                             //если НОД первых двух чисел равна 1, то с остальными можно не считать
            }
        }
        //метод для получения НОД пяти чисел
        //принимает входные параметры пяти целых числа
        public int GetNod(int n, int k, int l, int m, int p)
        {
            int nod;                                    //переменная для НОД
            nod = GetNod(n, k, out _);                  //вызов метода для получения НОД первых двух параметров            
            if (nod != 1)                               //проверка на НОД равную 1
            {
                nod = GetNod(l, nod, out _);            //вызов метода для получения НОД третьего параметра и НОД первых двух
                
                if (nod != 1)                           //проверка на НОД равную 1
                {
                    nod = GetNod(m, nod, out _);        //вызов метода для получения НОД четвертого параметра и НОД первых трех
                    
                    if (nod != 1)                       //проверка на НОД равную 1
                    {
                        nod = GetNod(p, nod, out _);    //вызов метода для получения НОД пятого параметра и НОД первых четырех
                        return nod;
                    }
                    else
                    {
                        return nod;                     //если НОД первых четырех чисел равна 1, то с остальными можно не считать
                    }
                }
                else
                {
                    return nod;                         //если НОД первых трех чисел равна 1, то с остальными можно не считать
                }
            }
            else
            {
                return nod;                             //если НОД первых двух чисел равна 1, то с остальными можно не считать
            }
        }
        //метод для получения НОД двух чисел с помощью бинарного алгоритма
        //принимает входные параметры двух целых числа
        //выходной параметр время затраченное на вычисление НОД
        public int GetNodStein(int n, int k, out double timeStein)
        {
            Stopwatch stopWatch = new Stopwatch();      //объект секундомера
            stopWatch.Start();                          //запуск отсчета
            n = Math.Abs(n);                            //модуль числа n
            k = Math.Abs(k);                            //модуль числа k
            int nod;                                    //переменная для НОД
            int first;                                  //переменная для большего значения
            int second;                                 //переменная для меньшего значения
            if (n > k)                                  //если n больше k, то переменные получают соответствующие значения
            {
                first = n;                              //первая first равна n
                second = k;                             //вторая second равна k
            }
            else                                        //если нет, то меняем местами
            {
                first = k;
                second = n;
            }
            if (first == 0)                             //первое условие бинарного алгоритма: НОД(0,b)=b
            {
                nod = second;                           
            }
            else if (second == 0)                        //первое условие бинарного алгоритма: НОД(a,0)=a
            {
                nod = first;
            }
            else if (first == second)                   //второе условие бинарного алгоритма: НОД(a,b) при a=b = a и b
            {
                nod = first;
            }            
            else if (first % 2 == 0 && second % 2 == 0) //третье условие бинарного алгоритма: оба четные
            {
                first /= 2;
                second /= 2;
                nod = 2 * GetNodStein(first, second, out _);//вызов метода со значениями деленными на 2
            }            
            else if (first % 2 == 1 && second % 2 == 1) //пятое условие бинарного алгоритма: оба нечетные
            {
                nod = GetNodStein((first - second) / 2, second, out _);//вызов метода со значениями: (от большего отнять меньшее и делить на 2), меньшее
            }
            else if (first % 2 == 0)                    //четвертое условие бинарного алгоритма: одно из чисел нечетное (меньшее)
            {
                nod = GetNodStein(first / 2, second, out _);//вызов метода со значениями: (четное поделенно на 2), меньшее
            }
            else                                        //четвертое условие бинарного алгоритма: одно из чисел нечетное(большее)
            {
                nod = GetNodStein(first, second / 2, out _);//вызов метода со значениями: большее, (четное поделенно на 2)
            }
            stopWatch.Stop();                           //остановка отсчета
            timeStein = stopWatch.Elapsed.TotalMilliseconds;//сохранение времени в выходном параметре
            return nod;                                 //метод возвращает НОД
        }
        //метод для получения двух массивов для постороения гистаграммы
        //принимает входные параметры двух целых числа
        //выходные параметры два массива типов string и double
        public void GetAlgsTime(int n, int k, out string[] masX, out double [] masY)
        {
            GetNod(n, k, out double algsEuclidTime);    //вызов метода для получения НОД двух целых чисел по алгоритму Евклида
            GetNodStein(n, k, out double algsSteinTime);//вызов метода для получения НОД двух целых чисел по бинарному алгоритму Стейна
            string [] algsName= { "EuclidAlgs", "SteinAlgs" };//сохраняем в массиве названия методов
            double [] algsTime = { algsEuclidTime, algsSteinTime };//сохраняем соответствующие методам значения затраченного времени
            masX = algsName;                            //ссылка на массив передается выходному параметру
            masY = algsTime;                            //ссылка на массив передается выходному параметру
        }
    }
}
