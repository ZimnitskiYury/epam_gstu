<?xml version="1.0"?>
<doc>
    <assembly>
        <name>task3</name>
    </assembly>
    <members>
        <member name="T:task3.Box">
            <summary>
            Box of Figures. Max count 20.
            </summary>
        </member>
        <member name="F:task3.Box.boxoffigure">
            <summary>
            List of figures.
            </summary>
        </member>
        <member name="M:task3.Box.AddFigure(task3.Figure)">
            <summary>
            Add new figure into box
            </summary>
            <param name="f1">Input figure</param>
        </member>
        <member name="M:task3.Box.AddFigure(task3.Figure,System.Int32)">
            <summary>
            Add new figure into box
            </summary>
            <param name="f1">Input figure</param>
            <param name="i">Index of Figure in box</param>
        </member>
        <member name="M:task3.Box.ViewFigure(System.Int32)">
            <summary>
            View figure by index without remove
            </summary>
            <param name="i">Index of figure in box</param>
        </member>
        <member name="M:task3.Box.RemoveFigure(System.Int32)">
            <summary>
            Remove Figure by index
            </summary>
            <param name="i">Index of figure in box</param>
        </member>
        <member name="M:task3.Box.ReplaceFigure(task3.Figure,System.Int32)">
            <summary>
            Replace Figure on another by index
            </summary>
            <param name="f1">New Figure</param>
            <param name="i">Index of figure in box</param>
        </member>
        <member name="T:task3.Rectangle">
            <summary>
            Class for operations with rectangle
            </summary>
        </member>
        <member name="M:task3.Rectangle.#ctor(System.String,System.String,System.Single,System.Single)">
            <summary>
            Constructor for Rectangle. Uses base class constructor.
            </summary>
            <param name="m">Material</param>
            <param name="c">Color</param>
            <param name="h">Height</param>
            <param name="w">Width</param>
        </member>
        <member name="P:task3.Rectangle.Area">
            <summary>
            Area of Rectangle
            </summary>
        </member>
        <member name="P:task3.Rectangle.Perimeter">
            <summary>
            Perimeter of Rectangle
            </summary>
        </member>
        <member name="M:task3.Rectangle.Equals(System.Object)">
            <summary>
            Compares this rectangle with another object
            </summary>
            <param name="obj">Input object</param>
            <returns>true or false</returns>
        </member>
        <member name="M:task3.Rectangle.GetHashCode">
            <summary>
            Override GetHashCode
            </summary>
            <returns></returns>
        </member>
        <member name="T:task3.Square">
            <summary>
            Class for operations with Square
            </summary>
        </member>
        <member name="F:task3.Square.a">
            <summary>
            Height of Square
            </summary>
        </member>
        <member name="M:task3.Square.#ctor(System.String,System.String,System.Single)">
            <summary>
            Constructor for Square. Uses base class constructor.
            </summary>
            <param name="m">Material</param>
            <param name="c">Color</param>
            <param name="a">Height</param>
        </member>
        <member name="P:task3.Square.Area">
            <summary>
            Calculates Area of square
            </summary>
        </member>
        <member name="P:task3.Square.Perimeter">
            <summary>
            Calculates Parimeter of square
            </summary>
        </member>
        <member name="M:task3.Square.Equals(System.Object)">
            <summary>
            Compares this square with another object
            </summary>
            <param name="obj">Input object</param>
            <returns>True or False</returns>
        </member>
        <member name="M:task3.Square.GetHashCode">
            <summary>
            Override GetHashCode()
            </summary>
            <returns>Int value for hashcode</returns>
        </member>
        <member name="T:task3.Triangle">
            <summary>
            Class for operations with triangle
            </summary>
        </member>
        <member name="F:task3.Triangle.a">
            <summary>
            Sides of triangle
            </summary>
        </member>
        <member name="F:task3.Triangle.b">
            <summary>
            Sides of triangle
            </summary>
        </member>
        <member name="F:task3.Triangle.d">
            <summary>
            Sides of triangle
            </summary>
        </member>
        <member name="M:task3.Triangle.#ctor(System.String,System.String,System.Single,System.Single,System.Single)">
            <summary>
            Constructor for Triangle. Uses base class constructor.
            </summary>
            <param name="m">Material</param>
            <param name="c">Color</param>
            <param name="a">First side</param>
            <param name="b">Second side</param>
            <param name="d">Third side</param>
        </member>
        <member name="P:task3.Triangle.Area">
            <summary>
            Calculates Area of triangle
            </summary>
        </member>
        <member name="P:task3.Triangle.Perimeter">
            <summary>
            Calculates Perimeter of triangle
            </summary>
        </member>
        <member name="M:task3.Triangle.Equals(System.Object)">
            <summary>
            Compares Triangle with another object
            </summary>
            <param name="obj">Input object</param>
            <returns>True or False</returns>
        </member>
        <member name="M:task3.Triangle.GetHashCode">
            <summary>
            Override GetHashCode()
            </summary>
            <returns>Int value for hash code</returns>
        </member>
        <member name="T:task3.Circle">
            <summary>
            Class for operations with Circle
            </summary>
        </member>
        <member name="F:task3.Circle.diameter">
            <summary>
            Diameter of circle
            </summary>
        </member>
        <member name="M:task3.Circle.#ctor(System.String,System.String,System.Single)">
            <summary>
            Constructor for Circle. Uses base class constructor.
            </summary>
            <param name="m">Material</param>
            <param name="c">Color</param>
            <param name="d">Diameter</param>
        </member>
        <member name="P:task3.Circle.Area">
            <summary>
            Calculates are of circle
            </summary>
        </member>
        <member name="P:task3.Circle.Perimeter">
            <summary>
            Calculates Perimeter of circle
            </summary>
        </member>
        <member name="M:task3.Circle.Equals(System.Object)">
            <summary>
            Compares Triangle with another object
            </summary>
            <param name="obj">Input object</param>
            <returns>true or false</returns>
        </member>
        <member name="M:task3.Circle.GetHashCode">
            <summary>
            Override GetHashCode()
            </summary>
            <returns>Int value for hashcode</returns>
        </member>
        <member name="T:task3.Figure">
            <summary>
            Abstract class for all figures
            </summary>
        </member>
        <member name="F:task3.Figure.color">
            <summary>
            Index of color in enumeration Colors
            </summary>
        </member>
        <member name="T:task3.Figure.Colors">
            <summary>
            Enumeration of colors
            </summary>
        </member>
        <member name="F:task3.Figure.Colors.transparent">
            <summary>
            Transparent = 0
            </summary>
        </member>
        <member name="F:task3.Figure.Colors.red">
            <summary>
            Red = 1
            </summary>
        </member>
        <member name="F:task3.Figure.Colors.blue">
            <summary>
            Blue = 2
            </summary>
        </member>
        <member name="F:task3.Figure.Colors.white">
            <summary>
            White = 3
            </summary>
        </member>
        <member name="F:task3.Figure.Colors.green">
            <summary>
            Green = 4
            </summary>
        </member>
        <member name="F:task3.Figure.Colors.black">
            <summary>
            Black = 5
            </summary>
        </member>
        <member name="F:task3.Figure.Colors.yellow">
            <summary>
            Yellow = 6
            </summary>
        </member>
        <member name="F:task3.Figure.Colors.purple">
            <summary>
            Purple = 7
            </summary>
        </member>
        <member name="F:task3.Figure.Colors.pink">
            <summary>
            Pink = 8
            </summary>
        </member>
        <member name="M:task3.Figure.#ctor(System.String,System.String)">
            <summary>
            Default constructor for all classes
            </summary>
        </member>
        <member name="P:task3.Figure.Area">
            <summary>
            Area of Figure
            </summary>
        </member>
        <member name="P:task3.Figure.Perimeter">
            <summary>
            Perimeter of Figure
            </summary>
        </member>
        <member name="P:task3.Figure.Color">
            <summary>
            
            </summary>
        </member>
        <member name="P:task3.Figure.Material">
            <summary>
            Type of material. Returns paper or film. 
            </summary>
        </member>
        <member name="M:task3.Figure.ToString">
            <summary>
            Override default method ToString()
            </summary>
            <returns>String of params Figure</returns>
        </member>
        <member name="M:task3.Figure.Equals(System.Object)">
            <summary>
            Method for comparison figures
            </summary>
            <returns>Returns true if Equal</returns>
        </member>
        <member name="M:task3.Figure.GetHashCode">
            <summary>
            Override GetHashCode()
            </summary>
            <returns>Int value for hashcode</returns>
        </member>
    </members>
</doc>
